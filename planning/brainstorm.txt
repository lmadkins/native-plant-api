API of native &/or local plants

MERN? Mongo?

SCOPE
  regions:
    - PNW?
    - NW OR/SW Washington? (Coast range, Willamette Valley, Cascades)
    - Willamette Valley?

  types:
    - native only?
    - common local

Classifications/specs for listings
    - type
      - tree
      - shrub
      - fern
      - grass
      - flower
        -(perennial, annual)
    - scientific name 
    - common name(s)
    - USDA zones
    - Eco region 
    - Typical height/width
    - Toxicity
    - Edibility 
    - Pollinator - y/n
    - Light needed
    - Specific conditions 
      - Drought tolerant
    - Images
      - Find on NWPlants website- they have images under Creative Commons license 


Resources for research: 

https://www.nwplants.com/business/catalog/listcommonindex.html

https://www.portland.gov/sites/default/files/2018-12/Portland_Plant_List_2016_Update_Final2.pdf

https://www.oregonmetro.gov/sites/default/files/2020/06/30/native-plants-for-Willamette-Valley-yards-booklet-high-res-20200107.pdf 

https://portlandnursery.com/docs/native-plants/portlandnativeplants.pdf

https://backyardhabitats.org/resources/native-plants-2020/

List of local native plant nurseries
https://backyardhabitats.org/resources/native-plants-2020/find-native-plants/ 


https://extension.oregonstate.edu/pub/ec-1577

https://www.wildflower.org/collections/collection.php?collection=OR

http://www.pnwplants.wsu.edu/CommonNames.aspx 
http://www.pnwplants.wsu.edu/Search.aspx 
http://www.pnwplants.wsu.edu/Thumbnails.aspx

https://pfaf.org/user/Default.aspx
https://oregonflora.org/garden/index.php
https://www.oregonmetro.gov/sites/default/files/2020/06/30/native-plants-for-Willamette-Valley-yards-booklet-high-res-20200107.pdf
https://backyardhabitats.org/wp-content/uploads/2021/01/Condensed-Portland-Plant-List-Plants-by-Condition.pdf
https://www.aspca.org/pet-care/animal-poison-control/toxic-and-non-toxic-plants
README on Repo:
- Resources used/more reading 
- Why local plants

Get by type
router.get('/plants/:type', (req, res) => {
  Plant.find({
    type: req.params.type
  })
  .then((plant) => {
    res.json(plant)
  })
})

router.get('/plants/:type', async (req, res, next) => {
  try {
    const foundPlants = await Plant.find({
      type: req.params.type
    })
    res.status(200).json(foundPlants)
  } catch(err) {
    next(err)
  }
})



Filtering
GET request:
enter the query key and query value 
(to string? to json? stringify?)
find/return where obj.key.value = query's obj.key.value

router.get('/:type', async (req, res, next) => {
  try {
    const type = req.params.type
    console.log(type)
  }
})

// router.get('*', (req, res) => {
//   req.query; // { a: '1', b: '2' }
//   res.json(req.query);
// });
// router.get('/plants/?type=', async (req, res, next) => {
//   try {
        // const filterval
//   }
// })

// 
// router.get('/plants/:filter/value', async (req, res, next) => {
//   try {
//     const filterKey = req.params
//     let stringKey = filterKey.toString()
//     const filterVal = req.params.filter
//     let stringFilter = filterVal.toString()
//     console.log(stringKey)
//     const foundPlants = await Plant.find({ 
//       filterKey: stringFilter
//     })
//     res.status(200).json(foundPlants)
//   } catch(err) {
//     next(err)
//   }
// })





router.get('/plants/:type', async (req, res, next) => {
  try {
    Plant.find({
      type: req.params.type
    })
    res.status(200).json(foundPlants)
  } catch(err) {
    next(err)
  }
})